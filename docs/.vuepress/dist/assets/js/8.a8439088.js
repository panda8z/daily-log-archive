(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{358:function(a,t,e){"use strict";e.r(t);var s=e(42),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"（1）本教程介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（1）本教程介绍"}},[a._v("#")]),a._v(" （1）本教程介绍")]),a._v(" "),e("p",[a._v("本教程主要是通过多个例子讲述CMake在构建系统工程过程中遇到的问题，以及使用方法。每一个例子都会提供一套完整的使用demo。")]),a._v(" "),e("h2",{attrs:{id:"（2）cmake-的介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（2）cmake-的介绍"}},[a._v("#")]),a._v(" （2）CMake 的介绍")]),a._v(" "),e("p",[a._v("CMake是Cross Platform Make的缩写，CMake是一个跨平台的安装（编译）工具，可以用简单的语句来描述所有平台的安装(编译过程)。他并不能直接生成最终的应用程序，而是产生标准的建构档（如 Unix 的 Makefile 或 Windows Visual C++ 的 projects/workspaces）。CMake使用更高级的工程组织工具，可以避免直接编写底层的makefile文件，使得工程构建和编译变得更加方便快捷。")]),a._v(" "),e("p",[a._v("CMake是通过CMakeLists.txt文件进行工程构建的，你的只需要编写CMakeLists.txt文件，对编译构成进行配置。同时一个路径下只能有一个CMakeLists.txt文件，因为CMake工具在进行工程构建的过程中，会自动在执行路径中进行CMakeLists.txt文件的查找。")]),a._v(" "),e("h2",{attrs:{id:"（3）cmake-的使用环境和安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（3）cmake-的使用环境和安装"}},[a._v("#")]),a._v(" （3）CMake 的使用环境和安装")]),a._v(" "),e("p",[a._v("CMake使用")]),a._v(" "),e("p",[a._v("本教程的使用环境为：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ubutu18.04 lts\n\ngcc version 7.5.0  \n\ng++ version 7.5.0  \n\ncmake version 3.10.2\n")])])]),e("p",[a._v("安装cmake：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("sudo apt install cmake\n")])])]),e("h2",{attrs:{id:"（4）第一个cmake-工程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（4）第一个cmake-工程"}},[a._v("#")]),a._v(" （4）第一个CMake 工程")]),a._v(" "),e("p",[a._v("首先，看一下整体的目录结构：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("|-- tutorial_first/\n\n  |-- src/\n\n  |-- CMakeLists.txt\n")])])]),e("p",[a._v("构建一个最简单的CMake工程只需要3步就可以完成，如下面的命令：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("#设置cmake的最低版本\ncmake_minimum_required(VERSION 3.10)\n\n#设置工程名称 和版本\nproject(tutorial_first VERSION 1.0)\n\n#增加生成可执行文件，生成的程序名称为：tutorial_first\nadd_executable(tutorial_first src/tutorial_first.cpp)\n")])])]),e("p",[a._v("命令使用：\ncmake_minimum_required ：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("      cmake_minimum_required(VERSION <min>[...<max>] [FATAL_ERROR])\n")])])]),e("p",[a._v("project：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("      project(<PROJECT-NAME>\n              [VERSION <major>[.<minor>[.<patch>[.<tweak>]]]]\n              [DESCRIPTION <project-description-string>]\n              [HOMEPAGE_URL <url-string>]\n              [LANGUAGES <language-name>...])\n")])])]),e("p",[a._v("add_executable：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("      add_executable(<name> [WIN32] [MACOSX_BUNDLE]\n                  [EXCLUDE_FROM_ALL]\n                  [source1] [source2 ...])\n")])])]),e("h2",{attrs:{id:"（5）使用cmake进行编译"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（5）使用cmake进行编译"}},[a._v("#")]),a._v(" （5）使用CMake进行编译")]),a._v(" "),e("p",[a._v("CMake在生成文件的过程中会生成很多中间缓存文件，为了是项目更简洁，文件路径更清楚，一般会在项目的root目录下建立一个文件夹，用于存储CMake生成的中间文件。而一般使用的文件家名称为build或者release。下面是使用命令：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("# 进入项目的root目录，本文为：tutorial_first\ncd tutorial_first\n\n# 创建存储缓存文件的文件夹，build\nmkdir build\n\n# 使用CMake命令生成makefile文件\ncmake ..\n\n# 使用make命令进行编译\ncmake --build .\n")])])]),e("h2",{attrs:{id:"（6）cpp-代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（6）cpp-代码"}},[a._v("#")]),a._v(" （6）cpp 代码")]),a._v(" "),e("p",[a._v("tutorial_first.cpp 程序代码：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('#include <iostream>\n\nint main(int argc, char const *argv[])\n{\n  std::cout << "cmake_demo_1教程" << std::endl;\n\n  return 0;\n}\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);