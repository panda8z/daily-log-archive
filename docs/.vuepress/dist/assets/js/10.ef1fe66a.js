(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{353:function(a,t,e){"use strict";e.r(t);var n=e(42),s=Object(n.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"（1）系列教程介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（1）系列教程介绍"}},[a._v("#")]),a._v(" （1）系列教程介绍")]),a._v(" "),e("p",[a._v("本文主要讲述如何使用CMakeLists.txt，指定当前程序的C++编译标准。")]),a._v(" "),e("h2",{attrs:{id:"（2）cmake-的使用环境和安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（2）cmake-的使用环境和安装"}},[a._v("#")]),a._v(" （2）CMake 的使用环境和安装")]),a._v(" "),e("p",[a._v("本教程的使用环境为：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ubutu18.04 lts\ngcc version 7.5.0\ng++ version 7.5.0\ncmake version 3.10.2\n")])])]),e("p",[a._v("安装cmake：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("sudo apt install cmake\n")])])]),e("h2",{attrs:{id:"（3）cmake指定c-标准"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（3）cmake指定c-标准"}},[a._v("#")]),a._v(" （3）CMake指定C++标准")]),a._v(" "),e("p",[a._v("指定C++准备一般有两种方式。下面给出两种方式的例子。\n  提示：在最新的CMake中推荐使用方法一。")]),a._v(" "),e("p",[a._v("首先，看一下整体的目录结构：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("|-- tutorial_third/\n\n  |-- src/tutorial.cpp\n\n  |-- include/TutorialConfig.h.in\n\n  |-- CMakeLists.txt\n")])])]),e("ol",[e("li",[a._v("方案一")])]),a._v(" "),e("p",[a._v("使用标志位CMAKE_CXX_STANDARD_REQUIRED和CMAKE_CXX_STANDARD指定编译器的使用版本，如果CMAKE_CXX_STANDARD_REQUIRED设置为True，则必须使用CMAKE_CXX_STANDARD指定的版本，如果CMAKE_CXX_STANDARD_REQUIRED设置为OFF则CMAKE_CXX_STANDARD指定版本的为首选版本，如果没有会使用上一版本。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('# 设置cmake的最低版本\ncmake_minimum_required(VERSION 3.10)\n\n# 设置工程名称 和版本\nproject(tutorial VERSION 1.0)\n\n# 设置指定的C++编译器版本是必须的，如果不设置，或者为OFF，则指定版本不可用时，会使用上一版本。\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# 指定为C++11 版本\nset(CMAKE_CXX_STANDARD 11)\n\n# 指定版本号的配置文件\nconfigure_file(include/TutorialConfig.h.in TutorialConfig.h)\n\n# # 指定为C++14 版本\n# set(CMAKE_CXX_STANDARD 14)\n\n# 增加生成可执行文件，生成的程序名称为：tutorial_first\nadd_executable(tutorial src/tutorial.cpp)\n\n# 为指定项目添加 include 路径\ntarget_include_directories(tutorial PUBLIC\n                            "${PROJECT_BINARY_DIR}"\n)\n')])])]),e("p",[a._v("命令使用：")]),a._v(" "),e("p",[a._v("set：设置变量variable的值为value。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("      set(<variable> <value>... [PARENT_SCOPE])\n")])])]),e("p",[a._v("核心命令：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("# 设置指定的C++编译器版本是必须的，如果不设置，或者为OFF，则指定版本不可用时，会使用上一版本。\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# 指定为C++11 版本\nset(CMAKE_CXX_STANDARD 11)\n")])])]),e("ol",[e("li",[a._v("方案二")])]),a._v(" "),e("p",[a._v("该方法直接指定CMAKE_CXX_FLAGS标志位进行设置，具体使用方式如下面的代码例子：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('# 设置cmake的最低版本\ncmake_minimum_required(VERSION 3.10)\n\n# 设置工程名称 和版本\nproject(tutorial VERSION 1.0)\n\n# 指定版本号的配置文件\nconfigure_file(include/TutorialConfig.h.in TutorialConfig.h)\n\n# 设置指定C++编译器版本。\ninclude(CheckCXXCompilerFlag)\nCHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)\nCHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)\nif(COMPILER_SUPPORTS_CXX11)\nset(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14") # set C++ 11\n# set(CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} -std=c99")\nelseif(COMPILER_SUPPORTS_CXX0X)\nset(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")\nmessage( STATUS "The comipler ${CMAKE_CXX_COMIPLER} has no C++ 11 suport. Please use a different C++ comipler.")\nendif()\n\n# 增加生成可执行文件，生成的程序名称为：tutorial_first\nadd_executable(tutorial src/tutorial.cpp)\n\n# 为指定项目添加 include 路径\ntarget_include_directories(tutorial PUBLIC\n                            "${PROJECT_BINARY_DIR}"\n)\n')])])]),e("h2",{attrs:{id:"（4）使用cmake进行编译"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（4）使用cmake进行编译"}},[a._v("#")]),a._v(" （4）使用CMake进行编译")]),a._v(" "),e("p",[a._v("CMake在生成文件的过程中会生成很多中间缓存文件，为了使项目更简洁，文件路径更清楚，一般会在项目的root目录下建立一个文件夹，用于存储CMake生成的中间文件。而一般使用的文件家名称为build或者release。下面是使用命令：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("# 进入项目的root目录，本文为：tutorial_first\ncd tutorial_first\n\n# 创建存储缓存文件的文件夹，build\nmkdir build\n\n# 使用CMake命令生成makefile文件\ncmake ..\n\n# 使用make命令进行编译\ncmake --build .\n")])])]),e("h2",{attrs:{id:""}},[e("a",{staticClass:"header-anchor",attrs:{href:"#"}},[a._v("#")])])])}),[],!1,null,null,null);t.default=s.exports}}]);